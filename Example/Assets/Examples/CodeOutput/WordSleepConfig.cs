// Generated by github.com/davyxu/tabtoy
// Version: 2.8.4
// DO NOT EDIT!!
using System.Collections.Generic;

namespace UExcelReader
{
	
	

	// Defined in table: WordSleepConfig
	
	public partial class WordSleepConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// WordSleep
		/// </summary>
		public List<WordSleepDefine> WordSleep = new List<WordSleepDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, WordSleepDefine> _WordSleepByKey = new Dictionary<int, WordSleepDefine>();
        public WordSleepDefine GetWordSleepByKey(int Key, WordSleepDefine def = default(WordSleepDefine))
        {
            WordSleepDefine ret;
            if ( _WordSleepByKey.TryGetValue( Key, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(WordSleepDefine) )
			{
				TableLogger.ErrorLine("GetWordSleepByKey failed, Key: {0}", Key);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<WordSleepConfig> WordSleepConfigDeserializeHandler = new tabtoy.DeserializeHandler<WordSleepConfig>(Deserialize);
		public static void Deserialize( WordSleepConfig ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.WordSleep.Add( reader.ReadStruct<WordSleepDefine>(WordSleepDefineDeserializeHandler) );
                	}
                	break; 
                }
             }

			
			// Build WordSleep Index
			for( int i = 0;i< ins.WordSleep.Count;i++)
			{
				var element = ins.WordSleep[i];
				
				ins._WordSleepByKey.Add(element.Key, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<TimeStruct> TimeStructDeserializeHandler = new tabtoy.DeserializeHandler<TimeStruct>(Deserialize);
		public static void Deserialize( TimeStruct ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Day = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Hour = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Minute = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Second = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<WordSleepDefine> WordSleepDefineDeserializeHandler = new tabtoy.DeserializeHandler<WordSleepDefine>(Deserialize);
		public static void Deserialize( WordSleepDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Key = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.SleepInterval = reader.ReadStruct<TimeStruct>(TimeStructDeserializeHandler);
                	}
                	break; 
                }
             }

			
		}
		#endregion
	

	} 

	// Defined in table: WordSleep
	
	public partial class TimeStruct
	{
	
		
		
		public int Day = 0; // 天
		
		
		public int Hour = 0; // 时
		
		
		public int Minute = 0; // 分
		
		
		public int Second = 0; // 秒
	
	

	} 

	// Defined in table: WordSleep
	
	public partial class WordSleepDefine
	{
	
		
		/// <summary> 
		/// 任务成功累计
		/// </summary>
		public int Key = 0; 
		
		/// <summary> 
		/// 睡眠间隔(Day:0 Hour:0 Minute:0 Second:0)
		/// </summary>
		public TimeStruct SleepInterval = new TimeStruct(); 
	
	

	} 

}
